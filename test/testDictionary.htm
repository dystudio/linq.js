<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Set</title>
    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>
    <script type="text/javascript" src="../linq.js"></script>
</head>
<body>
    <!-- This file is linq.js test for JsUnit -->
    <script type="text/javascript">
        var result;
        var correct;
        var aComparer = function (x) { return x.a }
        var obj1 = { a: 1 }
        var obj1_ = { a: 1 }
        var obj2 = { a: 2 }
        var obj2_ = { a: 2 }

        function testAddGetCountRemoveClear()
        {
            var dict = Enumerable.Empty().ToDictionary();
            dict.Add("a", 1);
            dict.Add("b", 2);
            dict.Add("c", 3);
            dict.Add("c", 100);
            assertEquals(1, dict.Get("a"));
            assertEquals(2, dict.Get("b"));
            assertEquals(100, dict.Get("c"));

            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Add(obj2, 3);
            dict.Add(obj2_, 4);
            assertEquals(1, dict.Get(obj1));
            assertEquals(2, dict.Get(obj1_));
            assertEquals(3, dict.Get(obj2));
            assertEquals(4, dict.Get(obj2_));

            assertEquals(7, dict.Count());

            dict.Remove("a");
            dict.Remove(obj1);
            dict.Remove(obj1_);
            dict.Remove(obj2_);
            assertEquals(undefined, dict.Get("a"));
            assertEquals(undefined, dict.Get(obj1));
            assertEquals(undefined, dict.Get(obj1_));
            assertEquals(undefined, dict.Get(obj2_));

            assertEquals(3, dict.Count());
            dict.Clear();
            assertEquals(undefined, dict.Get("b"));
            assertEquals(undefined, dict.Get(obj2));
            assertEquals(0, dict.Count());

            dict = Enumerable.Empty().ToDictionary("", "", aComparer);

            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Add(obj2, 3);
            dict.Add(obj2_, 4);
            assertEquals(2, dict.Get(obj1));
            assertEquals(2, dict.Get(obj1_));
            assertEquals(4, dict.Get(obj2));
            assertEquals(4, dict.Get(obj2_));

            assertEquals(2, dict.Count());

            dict.Remove(obj1);
            assertEquals(undefined, dict.Get(obj1));
            assertEquals(undefined, dict.Get(obj1_));

            assertEquals(1, dict.Count());
            dict.Clear();
            assertEquals(undefined, dict.Get(obj2));
            assertEquals(undefined, dict.Get(obj2_));
            assertEquals(0, dict.Count());
        }

        function testSetContains()
        {
            var dict = Enumerable.Empty().ToDictionary();
            dict.Add("a", 1);
            dict.Add("b", 2);
            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Set("a", 1000);
            dict.Set("b", 2000);
            dict.Set(obj1, 10000);
            dict.Set(obj1_, 20000);
            assertEquals(1000, dict.Get("a"));
            assertEquals(2000, dict.Get("b"));
            assertEquals(10000, dict.Get(obj1));
            assertEquals(20000, dict.Get(obj1_));
            assertTrue(dict.Contains("a"));
            assertTrue(dict.Contains("b"));
            assertTrue(dict.Contains(obj1));
            assertTrue(dict.Contains(obj1_));
            assertFalse(dict.Contains("c"));
            assertFalse(dict.Contains(obj2));

            dict = Enumerable.Empty().ToDictionary("", "", aComparer);
            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Add(obj2, 3);
            dict.Add(obj2_, 4);
            dict.Set(obj1, 10000);
            dict.Set(obj1_, 20000);
            dict.Set(obj2, 30000);
            dict.Set(obj2_, 40000);
            assertEquals(20000, dict.Get(obj1));
            assertEquals(20000, dict.Get(obj1_));
            assertEquals(40000, dict.Get(obj2));
            assertEquals(40000, dict.Get(obj2_));
            assertTrue(dict.Contains(obj1));
            assertTrue(dict.Contains(obj1_));
            assertFalse(dict.Contains({ a: 3 }));
        }


        function testToEnumerable()
        {
            var dict = Enumerable.Empty().ToDictionary();
            dict.Add("a", 1);
            dict.Add("b", 2);
            dict.Add("c", 3);

            var ar = dict.ToEnumerable().OrderBy("$.Key").ToArray();
            assertEquals("a", ar[0].Key);
            assertEquals(1, ar[0].Value);
            assertEquals("b", ar[1].Key);
            assertEquals(2, ar[1].Value);
            assertEquals("c", ar[2].Key);
            assertEquals(3, ar[2].Value);

            dict.Clear();
            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Add(obj2, 3);
            dict.Add(obj2_, 4);

            ar = dict.ToEnumerable().OrderBy("$.Key.a").ToArray();
            assertEquals(obj1, ar[0].Key);
            assertEquals(1, ar[0].Value);
            assertEquals(obj1_, ar[1].Key);
            assertEquals(2, ar[1].Value);
            assertEquals(obj2, ar[2].Key);
            assertEquals(3, ar[2].Value);
            assertEquals(obj2_, ar[3].Key);
            assertEquals(4, ar[3].Value);

            dict = Enumerable.Empty().ToDictionary("", "", aComparer);
            dict.Add(obj1, 1);
            dict.Add(obj1_, 2);
            dict.Add(obj2, 3);
            dict.Add(obj2_, 4);
            ar = dict.ToEnumerable().OrderBy("$.Key.a").ToArray();
            assertEquals(obj1_, ar[0].Key);
            assertEquals(2, ar[0].Value);
            assertEquals(obj2_, ar[1].Key);
            assertEquals(4, ar[1].Value);
        }
    </script>
</body>
</html>
