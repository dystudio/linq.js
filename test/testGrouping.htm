<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Grouping</title>
    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>
    <script type="text/javascript" src="../linq.js"></script>
</head>
<body>
    <!-- This file is linq.js test for JsUnit -->
    <script type="text/javascript">
        var E = Enumerable;
        var result;
        var correct;
        var fileList = ["temp.xls", "temp2.xls", "temp.pdf", "temp.jpg", "temp2.pdf", "temp3.xls"];

        function testGroupBy()
        {
            result = E.From(fileList).GroupBy("file=>file.match(/\\.(.+$)/)[1]").ToArray();
            correct = [{ Key: "xls", Value: ["temp.xls", "temp2.xls", "temp3.xls"] },
                       { Key: "pdf", Value: ["temp.pdf", "temp2.pdf"] },
                       { Key: "jpg", Value: ["temp.jpg"]}];
            assertArrayEquals(correct, result);
        }

        function testGroupBy2()
        {
            result = E.From(fileList).GroupBy("file=>file.match(/\\.(.+$)/)[1]",
                "file=>file.match(/(^.+)\\..+$/)[1]").ToArray();
            correct = [{ Key: "xls", Value: ["temp", "temp2", "temp3"] },
                       { Key: "pdf", Value: ["temp", "temp2"] },
                       { Key: "jpg", Value: ["temp"]}];
            assertArrayEquals(correct, result);
        }

        function testGroupBy3()
        {
            result = E.From(fileList).GroupBy("file=>file.match(/\\.(.+$)/)[1]",
               "file=>file",
               "ext,lookup=>{extension:ext,count:lookup.length,files:lookup}")
               .ToArray();
            correct = [{ extension: "xls", count: 3, files: ["temp.xls", "temp2.xls", "temp3.xls"] },
                       { extension: "pdf", count: 2, files: ["temp.pdf", "temp2.pdf"] },
                       { extension: "jpg", count: 1, files: ["temp.jpg"]}];
            assertArrayEquals(correct, result);
        }

        function testGroupBy4()
        {
            var objects = [
                { Date: new Date(2000, 1, 1), Id: 1 },
                { Date: new Date(2010, 5, 5), Id: 2 },
                { Date: new Date(2000, 1, 1), Id: 3 }
            ]
            var result = Enumerable.From(objects)
                .GroupBy("$.Date", "$.Id",
                    function (key, group) { return key.getFullYear() + "-" + group.ToString(',') },
                    function (key) { return key.toString() })
                .ToArray();
            correct = ["2000-1,3", "2010-2"]
            assertArrayEquals(correct, result);
        }

        function testPartitionBy()
        {
            result = E.From(fileList).PartitionBy("file=>file.match(/\\.(.+$)/)[1]").ToArray();
            correct = [{ Key: "xls", Value: ["temp.xls", "temp2.xls"] },
                       { Key: "pdf", Value: ["temp.pdf"] },
                       { Key: "jpg", Value: ["temp.jpg"] },
                       { Key: "pdf", Value: ["temp2.pdf"] },
                       { Key: "xls", Value: ["temp3.xls"] }
                      ];
            assertArrayEquals(correct, result);
        }

        function testPartitionBy2()
        {
            result = E.From(fileList).PartitionBy("file=>file.match(/\\.(.+$)/)[1]",
                "file=>file.match(/(^.+)\\..+$/)[1]").ToArray();
            correct = [{ Key: "xls", Value: ["temp", "temp2"] },
                       { Key: "pdf", Value: ["temp"] },
                       { Key: "jpg", Value: ["temp"] },
                       { Key: "pdf", Value: ["temp2"] },
                       { Key: "xls", Value: ["temp3"] }
                      ];
            assertArrayEquals(correct, result);
        }

        function testPartitionBy3()
        {
            result = E.From(fileList).PartitionBy("file=>file.match(/\\.(.+$)/)[1]",
               "file=>file",
               "ext,lookup=>{extension:ext,count:lookup.length,files:lookup}")
               .ToArray();
            correct = [{ extension: "xls", count: 2, files: ["temp.xls", "temp2.xls"] },
                       { extension: "pdf", count: 1, files: ["temp.pdf"] },
                       { extension: "jpg", count: 1, files: ["temp.jpg"] },
                       { extension: "pdf", count: 1, files: ["temp2.pdf"] },
                       { extension: "xls", count: 1, files: ["temp3.xls"] }
                      ];
            assertArrayEquals(correct, result);
        }

        function testPartitionBy4()
        {
            var objects = [
                { Date: new Date(2000, 1, 1), Id: 1 },
                { Date: new Date(2000, 1, 1), Id: 2 },
                { Date: new Date(2010, 5, 5), Id: 3 },
                { Date: new Date(2000, 1, 1), Id: 4 },
                { Date: new Date(2010, 5, 5), Id: 5 },
                { Date: new Date(2010, 5, 5), Id: 6 }
            ]
            var result = Enumerable.From(objects)
                .PartitionBy("$.Date", "$.Id",
                    function (key, group) { return key.getFullYear() + "-" + group.ToString(',') },
                    function (key) { return key.toString() })
                .ToArray();
            correct = ["2000-1,2", "2010-3", "2000-4", "2010-5,6"]
            assertArrayEquals(correct, result);
        }


        function testBufferWithCount()
        {
            result = E.Range(1, 10).BufferWithCount("3");
            correct = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]];
            assertArrayEquals(correct, result.ToArray());
        }
    </script>
</body>
</html>
